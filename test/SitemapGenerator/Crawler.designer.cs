#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ManagedFusion.Crawler
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Crawler")]
	public partial class CrawlerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertSessionScanRelation(SessionScanRelation instance);
    partial void UpdateSessionScanRelation(SessionScanRelation instance);
    partial void DeleteSessionScanRelation(SessionScanRelation instance);
    partial void InsertSessionScan(SessionScan instance);
    partial void UpdateSessionScan(SessionScan instance);
    partial void DeleteSessionScan(SessionScan instance);
    #endregion
		
		public CrawlerDataContext() : 
				base(global::ManagedFusion.Crawler.Properties.Settings.Default.CrawlerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CrawlerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrawlerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrawlerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrawlerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<SessionScanRelation> SessionScanRelations
		{
			get
			{
				return this.GetTable<SessionScanRelation>();
			}
		}
		
		public System.Data.Linq.Table<SessionScan> SessionScans
		{
			get
			{
				return this.GetTable<SessionScan>();
			}
		}
	}
	
	[Table(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SessionKey;
		
		private System.DateTime _ScanDate;
		
		private string _Url;
		
		private EntitySet<SessionScan> _SessionScans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionKeyChanging(System.Guid value);
    partial void OnSessionKeyChanged();
    partial void OnScanDateChanging(System.DateTime value);
    partial void OnScanDateChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Session()
		{
			this._SessionScans = new EntitySet<SessionScan>(new Action<SessionScan>(this.attach_SessionScans), new Action<SessionScan>(this.detach_SessionScans));
			OnCreated();
		}
		
		[Column(Storage="_SessionKey", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SessionKey
		{
			get
			{
				return this._SessionKey;
			}
			set
			{
				if ((this._SessionKey != value))
				{
					this.OnSessionKeyChanging(value);
					this.SendPropertyChanging();
					this._SessionKey = value;
					this.SendPropertyChanged("SessionKey");
					this.OnSessionKeyChanged();
				}
			}
		}
		
		[Column(Storage="_ScanDate", DbType="DateTime NOT NULL")]
		public System.DateTime ScanDate
		{
			get
			{
				return this._ScanDate;
			}
			set
			{
				if ((this._ScanDate != value))
				{
					this.OnScanDateChanging(value);
					this.SendPropertyChanging();
					this._ScanDate = value;
					this.SendPropertyChanged("ScanDate");
					this.OnScanDateChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Association(Name="Session_SessionScan", Storage="_SessionScans", ThisKey="SessionKey", OtherKey="SessionKey")]
		public EntitySet<SessionScan> SessionScans
		{
			get
			{
				return this._SessionScans;
			}
			set
			{
				this._SessionScans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SessionScans(SessionScan entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_SessionScans(SessionScan entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[Table(Name="dbo.SessionScanRelation")]
	public partial class SessionScanRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SessionKey;
		
		private string _UrlHash;
		
		private string _RelatedHash;
		
		private string _Related;
		
		private int _Count;
		
		private EntityRef<SessionScan> _SessionScan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionKeyChanging(System.Guid value);
    partial void OnSessionKeyChanged();
    partial void OnUrlHashChanging(string value);
    partial void OnUrlHashChanged();
    partial void OnRelatedHashChanging(string value);
    partial void OnRelatedHashChanged();
    partial void OnRelatedChanging(string value);
    partial void OnRelatedChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    #endregion
		
		public SessionScanRelation()
		{
			this._SessionScan = default(EntityRef<SessionScan>);
			OnCreated();
		}
		
		[Column(Storage="_SessionKey", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SessionKey
		{
			get
			{
				return this._SessionKey;
			}
			set
			{
				if ((this._SessionKey != value))
				{
					if (this._SessionScan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionKeyChanging(value);
					this.SendPropertyChanging();
					this._SessionKey = value;
					this.SendPropertyChanged("SessionKey");
					this.OnSessionKeyChanged();
				}
			}
		}
		
		[Column(Storage="_UrlHash", DbType="Char(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UrlHash
		{
			get
			{
				return this._UrlHash;
			}
			set
			{
				if ((this._UrlHash != value))
				{
					if (this._SessionScan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUrlHashChanging(value);
					this.SendPropertyChanging();
					this._UrlHash = value;
					this.SendPropertyChanged("UrlHash");
					this.OnUrlHashChanged();
				}
			}
		}
		
		[Column(Storage="_RelatedHash", DbType="Char(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RelatedHash
		{
			get
			{
				return this._RelatedHash;
			}
			set
			{
				if ((this._RelatedHash != value))
				{
					this.OnRelatedHashChanging(value);
					this.SendPropertyChanging();
					this._RelatedHash = value;
					this.SendPropertyChanged("RelatedHash");
					this.OnRelatedHashChanged();
				}
			}
		}
		
		[Column(Storage="_Related", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Related
		{
			get
			{
				return this._Related;
			}
			set
			{
				if ((this._Related != value))
				{
					this.OnRelatedChanging(value);
					this.SendPropertyChanging();
					this._Related = value;
					this.SendPropertyChanged("Related");
					this.OnRelatedChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Association(Name="SessionScan_SessionScanRelation", Storage="_SessionScan", ThisKey="SessionKey,UrlHash", OtherKey="SessionKey,UrlHash", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SessionScan SessionScan
		{
			get
			{
				return this._SessionScan.Entity;
			}
			set
			{
				SessionScan previousValue = this._SessionScan.Entity;
				if (((previousValue != value) 
							|| (this._SessionScan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SessionScan.Entity = null;
						previousValue.SessionScanRelations.Remove(this);
					}
					this._SessionScan.Entity = value;
					if ((value != null))
					{
						value.SessionScanRelations.Add(this);
						this._SessionKey = value.SessionKey;
						this._UrlHash = value.UrlHash;
					}
					else
					{
						this._SessionKey = default(System.Guid);
						this._UrlHash = default(string);
					}
					this.SendPropertyChanged("SessionScan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SessionScan")]
	public partial class SessionScan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SessionKey;
		
		private string _UrlHash;
		
		private System.DateTime _ScanDate;
		
		private string _ContentHash;
		
		private string _Host;
		
		private string _Base;
		
		private string _Found;
		
		private string _Url;
		
		private string _Redirect;
		
		private string _Method;
		
		private System.Nullable<int> _Status;
		
		private string _Title;
		
		private string _Description;
		
		private string _Keywords;
		
		private string _Robots;
		
		private string _ContentType;
		
		private string _ContentEncoding;
		
		private System.Nullable<long> _ContentLength;
		
		private string _CacheControl;
		
		private string _Expires;
		
		private EntitySet<SessionScanRelation> _SessionScanRelations;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionKeyChanging(System.Guid value);
    partial void OnSessionKeyChanged();
    partial void OnUrlHashChanging(string value);
    partial void OnUrlHashChanged();
    partial void OnScanDateChanging(System.DateTime value);
    partial void OnScanDateChanged();
    partial void OnContentHashChanging(string value);
    partial void OnContentHashChanged();
    partial void OnHostChanging(string value);
    partial void OnHostChanged();
    partial void OnBaseChanging(string value);
    partial void OnBaseChanged();
    partial void OnFoundChanging(string value);
    partial void OnFoundChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnRedirectChanging(string value);
    partial void OnRedirectChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnRobotsChanging(string value);
    partial void OnRobotsChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnContentEncodingChanging(string value);
    partial void OnContentEncodingChanged();
    partial void OnContentLengthChanging(System.Nullable<long> value);
    partial void OnContentLengthChanged();
    partial void OnCacheControlChanging(string value);
    partial void OnCacheControlChanged();
    partial void OnExpiresChanging(string value);
    partial void OnExpiresChanged();
    #endregion
		
		public SessionScan()
		{
			this._SessionScanRelations = new EntitySet<SessionScanRelation>(new Action<SessionScanRelation>(this.attach_SessionScanRelations), new Action<SessionScanRelation>(this.detach_SessionScanRelations));
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[Column(Storage="_SessionKey", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SessionKey
		{
			get
			{
				return this._SessionKey;
			}
			set
			{
				if ((this._SessionKey != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionKeyChanging(value);
					this.SendPropertyChanging();
					this._SessionKey = value;
					this.SendPropertyChanged("SessionKey");
					this.OnSessionKeyChanged();
				}
			}
		}
		
		[Column(Storage="_UrlHash", DbType="Char(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UrlHash
		{
			get
			{
				return this._UrlHash;
			}
			set
			{
				if ((this._UrlHash != value))
				{
					this.OnUrlHashChanging(value);
					this.SendPropertyChanging();
					this._UrlHash = value;
					this.SendPropertyChanged("UrlHash");
					this.OnUrlHashChanged();
				}
			}
		}
		
		[Column(Storage="_ScanDate", DbType="DateTime NOT NULL")]
		public System.DateTime ScanDate
		{
			get
			{
				return this._ScanDate;
			}
			set
			{
				if ((this._ScanDate != value))
				{
					this.OnScanDateChanging(value);
					this.SendPropertyChanging();
					this._ScanDate = value;
					this.SendPropertyChanged("ScanDate");
					this.OnScanDateChanged();
				}
			}
		}
		
		[Column(Storage="_ContentHash", DbType="Char(40)")]
		public string ContentHash
		{
			get
			{
				return this._ContentHash;
			}
			set
			{
				if ((this._ContentHash != value))
				{
					this.OnContentHashChanging(value);
					this.SendPropertyChanging();
					this._ContentHash = value;
					this.SendPropertyChanged("ContentHash");
					this.OnContentHashChanged();
				}
			}
		}
		
		[Column(Storage="_Host", DbType="VarChar(255)")]
		public string Host
		{
			get
			{
				return this._Host;
			}
			set
			{
				if ((this._Host != value))
				{
					this.OnHostChanging(value);
					this.SendPropertyChanging();
					this._Host = value;
					this.SendPropertyChanged("Host");
					this.OnHostChanged();
				}
			}
		}
		
		[Column(Storage="_Base", DbType="VarChar(255)")]
		public string Base
		{
			get
			{
				return this._Base;
			}
			set
			{
				if ((this._Base != value))
				{
					this.OnBaseChanging(value);
					this.SendPropertyChanging();
					this._Base = value;
					this.SendPropertyChanged("Base");
					this.OnBaseChanged();
				}
			}
		}
		
		[Column(Storage="_Found", DbType="VarChar(255)")]
		public string Found
		{
			get
			{
				return this._Found;
			}
			set
			{
				if ((this._Found != value))
				{
					this.OnFoundChanging(value);
					this.SendPropertyChanging();
					this._Found = value;
					this.SendPropertyChanged("Found");
					this.OnFoundChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="VarChar(255)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Redirect", DbType="VarChar(255)")]
		public string Redirect
		{
			get
			{
				return this._Redirect;
			}
			set
			{
				if ((this._Redirect != value))
				{
					this.OnRedirectChanging(value);
					this.SendPropertyChanging();
					this._Redirect = value;
					this.SendPropertyChanged("Redirect");
					this.OnRedirectChanged();
				}
			}
		}
		
		[Column(Storage="_Method", DbType="VarChar(10)")]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Keywords", DbType="VarChar(MAX)")]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[Column(Storage="_Robots", DbType="VarChar(MAX)")]
		public string Robots
		{
			get
			{
				return this._Robots;
			}
			set
			{
				if ((this._Robots != value))
				{
					this.OnRobotsChanging(value);
					this.SendPropertyChanging();
					this._Robots = value;
					this.SendPropertyChanged("Robots");
					this.OnRobotsChanged();
				}
			}
		}
		
		[Column(Storage="_ContentType", DbType="VarChar(50)")]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ContentEncoding", DbType="VarChar(50)")]
		public string ContentEncoding
		{
			get
			{
				return this._ContentEncoding;
			}
			set
			{
				if ((this._ContentEncoding != value))
				{
					this.OnContentEncodingChanging(value);
					this.SendPropertyChanging();
					this._ContentEncoding = value;
					this.SendPropertyChanged("ContentEncoding");
					this.OnContentEncodingChanged();
				}
			}
		}
		
		[Column(Storage="_ContentLength", DbType="BigInt")]
		public System.Nullable<long> ContentLength
		{
			get
			{
				return this._ContentLength;
			}
			set
			{
				if ((this._ContentLength != value))
				{
					this.OnContentLengthChanging(value);
					this.SendPropertyChanging();
					this._ContentLength = value;
					this.SendPropertyChanged("ContentLength");
					this.OnContentLengthChanged();
				}
			}
		}
		
		[Column(Storage="_CacheControl", DbType="VarChar(50)")]
		public string CacheControl
		{
			get
			{
				return this._CacheControl;
			}
			set
			{
				if ((this._CacheControl != value))
				{
					this.OnCacheControlChanging(value);
					this.SendPropertyChanging();
					this._CacheControl = value;
					this.SendPropertyChanged("CacheControl");
					this.OnCacheControlChanged();
				}
			}
		}
		
		[Column(Storage="_Expires", DbType="VarChar(50)")]
		public string Expires
		{
			get
			{
				return this._Expires;
			}
			set
			{
				if ((this._Expires != value))
				{
					this.OnExpiresChanging(value);
					this.SendPropertyChanging();
					this._Expires = value;
					this.SendPropertyChanged("Expires");
					this.OnExpiresChanged();
				}
			}
		}
		
		[Association(Name="SessionScan_SessionScanRelation", Storage="_SessionScanRelations", ThisKey="SessionKey,UrlHash", OtherKey="SessionKey,UrlHash")]
		public EntitySet<SessionScanRelation> SessionScanRelations
		{
			get
			{
				return this._SessionScanRelations;
			}
			set
			{
				this._SessionScanRelations.Assign(value);
			}
		}
		
		[Association(Name="Session_SessionScan", Storage="_Session", ThisKey="SessionKey", OtherKey="SessionKey", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.SessionScans.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.SessionScans.Add(this);
						this._SessionKey = value.SessionKey;
					}
					else
					{
						this._SessionKey = default(System.Guid);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SessionScanRelations(SessionScanRelation entity)
		{
			this.SendPropertyChanging();
			entity.SessionScan = this;
		}
		
		private void detach_SessionScanRelations(SessionScanRelation entity)
		{
			this.SendPropertyChanging();
			entity.SessionScan = null;
		}
	}
}
#pragma warning restore 1591
